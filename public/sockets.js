// Generated by CoffeeScript 1.10.0
socket.on('load state', function(data) {
  $('#connected').text(data.num_users);
  canvas.loadFromJSON(data.canvas_state);
  return console.log(canvas.getObjects());
});

socket.on('user connected', function(data) {
  return $('#connected').text(data.total);
});

socket.on('user disconnected', function(data) {
  return $('#connected').text(data.total);
});

socket.on('add path', function(json_path) {
  var p, svg_d;
  svg_d = json_path.path.toString().split(',').join(' ');
  p = new fabric.Path(svg_d, {
    stroke: json_path.stroke,
    strokeWidth: json_path.strokeWidth,
    fill: null,
    strokeLineCap: 'round',
    strokeLineJoin: 'round',
    pathOffset: {
      x: json_path.pathOffset.x,
      y: json_path.pathOffset.y
    }
  });
  return canvas.add(p);
});

socket.on('remove path', function(json_path) {
  var p, svg_d;
  svg_d = json_path.path.toString().split(',').join(' ');
  p = new fabric.Path(svg_d, {
    stroke: json_path.stroke,
    strokeWidth: json_path.strokeWidth,
    fill: null,
    strokeLineCap: 'round',
    strokeLineJoin: 'round',
    pathOffset: {
      x: json_path.pathOffset.x,
      y: json_path.pathOffset.y
    }
  });
  console.log(p);
  console.log(canvas.getObjects());
  return canvas.forEachObject(function(obj) {
    if (obj.height === p.height && obj.left === p.left && obj.stroke === p.stroke) {
      return obj.remove();
    }
  });
});
