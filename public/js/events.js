// Generated by CoffeeScript 1.10.0
var appendUserDiv, removePath;

socket.on('load state', function(data) {
  $('#connected').text(data.num_users);
  data.users.map(function(id) {
    return appendUserDiv(id);
  });
  return canvas.loadFromJSON(data.canvas_state);
});

socket.on('user connected', function(data) {
  $('#connected').text(data.num_users);
  return appendUserDiv(data.id);
});

socket.on('user move', function(data) {
  return $('#' + data.id).css({
    visibility: 'visible',
    position: 'absolute',
    left: data.x,
    top: data.y,
    width: data.size,
    height: data.size,
    background: data.color
  });
});

socket.on('user disconnected', function(data) {
  $('#connected').text(data.num_users);
  $('#' + data.id).remove();
  if (data.actions) {
    data.actions.map(function(p) {
      return removePath(p);
    });
    return socket.emit('save canvas', canvas.toJSON());
  }
});

socket.on('add path', function(json_path) {
  return fabric.util.enlivenObjects([json_path], function(paths) {
    return canvas.add(paths[0]);
  });
});

socket.on('remove path', function(json_path) {
  return removePath(json_path);
});

socket.on('new message', function(data) {
  var text;
  text = data.id + ': ' + data.message;
  $('#messages').append($('<li>', {
    text: text
  }));
  return $('#messages-container').scrollTop($('#messages-container').prop('scrollHeight'));
});

removePath = function(p) {
  return canvas.forEachObject(function(o) {
    if (o.path.toString() === p.path.toString()) {
      return o.remove();
    }
  });
};

appendUserDiv = function(id) {
  return $('<div>', {
    id: id,
    "class": 'user'
  }).appendTo('body');
};
