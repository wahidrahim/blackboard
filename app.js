// Generated by CoffeeScript 1.10.0
var app, canvas_state, express, getID, io, logger, path, stylus, user_actions, users;

express = require('express');

logger = require('morgan');

stylus = require('stylus');

path = require('path');

io = require('socket.io')();

app = express();

app.set('port', 3000);

app.set('view engine', 'jade');

app.use(logger('dev'));

app.use(stylus.middleware(path.join(__dirname, 'public')));

app.use(express["static"](path.join(__dirname, 'public')));

app.get('/', function(req, res) {
  return res.render('index');
});

io.listen(app.listen(app.get('port'), function() {
  return console.log('app is listening on http://localhost:' + app.get('port'));
}));

users = [];

user_actions = {};

canvas_state = void 0;

getID = function(socket) {
  return socket.id.substr(2);
};

io.on('connect', function(socket) {
  users.push(getID(socket));
  socket.emit('load state', {
    num_users: users.length,
    canvas_state: canvas_state,
    users: users
  });
  socket.broadcast.emit('user connected', {
    num_users: users.length,
    id: getID(socket)
  });
  socket.on('user move', function(pos) {
    pos.id = getID(socket);
    return socket.broadcast.emit('user move', pos);
  });
  socket.on('add path', function(path) {
    return socket.broadcast.emit('add path', path);
  });
  socket.on('remove path', function(path) {
    return socket.broadcast.emit('remove path', path);
  });
  socket.on('save canvas', function(canvas) {
    return canvas_state = canvas;
  });
  socket.on('save actions', function(actions) {
    return user_actions[socket.id] = actions;
  });
  socket.on('message', function(message) {
    return io.emit('new message', {
      id: getID(socket),
      message: message
    });
  });
  return socket.on('disconnect', function() {
    users.splice(users.indexOf(getID(socket)), 1);
    socket.broadcast.emit('user disconnected', {
      num_users: users.length,
      id: getID(socket),
      actions: user_actions[socket.id]
    });
    if (users.length === 0) {
      return canvas_state = void 0;
    }
  });
});
